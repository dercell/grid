#include <stdio.h>
#include "_mt19937.c"

mt19937_state state;
int size = 10;
float freq = 0.9;
int N = 500;
int R = 1;
int T = 1.3;

void f_gen(int gr[size][size]){
	int i,j;
	for(i=0;i<size;i++){
		for(j=0;j<size;j++){
			if(mt19937_generate_uniform_float_(&state)<freq)
				gr[i][j]=1;
			else
				gr[i][j]=0;
			}
	}
}
void display(int gr[size][size]){
	int i,j;
	for(i=0;i<size;i++){
		for(j=0;j<size;j++){
			printf("%d", gr[i][j]);}
		printf("\n");}
}

float frequency(int gr[size][size]){
	int i,j,k=0;
	for(i=0;i<size;i++){
		for(j=0;j<size;j++){
			if(gr[i][j]==1)
				k++;}}
	fputs(k*1.0/(size*size), file);
	fputs("\n", file);
	return k*1.0/(size*size);
}

void boundary(int gr[size][size]){
	int i;
	for(i=2;i<size-2;i++){
		gr[0][i]=gr[size-4][i];
		gr[1][i]=gr[size-3][i];
		gr[size-2][i]=gr[2][i];
		gr[size-1][i]=gr[3][i];

		gr[i][0]=gr[i][size-4];
		gr[i][1]=gr[i][size-3];
		gr[i][size-2]=gr[i][2];
		gr[i][size-1]=gr[i][3];
	}
	gr[0][0]=gr[size-4][size-4];
	gr[1][1]=gr[size-3][size-3];
	gr[0][1]=gr[size-4][size-3];
	gr[1][0]=gr[size-3][size-4];

	gr[size-1][size-1]=gr[3][3];
	gr[size-2][size-2]=gr[2][2];
	gr[size-2][size-1]=gr[2][3];
	gr[size-1][size-2]=gr[3][2];
	
	gr[0][size-2]=gr[size-4][2];
	gr[0][size-1]=gr[size-4][3];
	gr[1][size-2]=gr[size-3][2];
	gr[1][size-1]=gr[size-3][3];

	gr[size-2][0]=gr[2][size-4];
	gr[size-1][0]=gr[3][size-4];
	gr[size-2][1]=gr[2][size-3];
	gr[size-1][1]=gr[3][size-3];
}

int game(int gr[size][size], int i, int j){
	int p,q, payoff=0;
	printf("%d, %d\n", i, j);
	for(p=0;p<3;p++){
		for(q=0;q<3;q++){
			printf("%d", gr[i+p-1][j+q-1]);
			if(gr[i][j]==1 && gr[i+p-1][j+q-1]==gr[i][j])
				payoff += R;			
			if(gr[i][j]==0 && gr[i+p-1][j+q-1]!=gr[i][j])
				payoff += T;
			}
		printf("\n");
		
} return payoff;
	
}

void generations(int gr[size][size], int t){
	int new_grid[size][size];
	int i,j,p,q, i_max, j_max, payoff, payoff_max=0;
	for(i=2;i<size-2;i++){
		for(j=2;j<size-2;j++){
			for(p=0;p<3;p++){
				for(q=0;q<3;q++){
					payoff=game(gr, i+p-1, j+q-1);
					if(payoff > payoff_max){
						payoff_max=payoff;
						i_max=i+p-1;
						j_max=j+q-1;
					}
 				}
			}
			new_grid[i][j]=gr[i_max][j_max];
		}
	}
	boundary(new_grid);
	for(i=0;i<size;i++){
		for(j=0;j<size;j++){
			gr[i][j]=new_grid[i][j];
		}
	}
	frequency(grid);
}

int main(){
	int grid[size][size], gr[size][size], x;
	float fc[N];
	mt19937_init_(&state);
	file=fopen("data.txt","w");
	f_gen(grid);
	boundary(grid);
	display(grid);
	printf("\n%f\n", frequency(grid, file));
	x=game(grid, 1,3);
	printf("\n%d\n", x);
	generations(grid, 1, file);
	display(grid);
	fclose(file);	
	return 0;
}
